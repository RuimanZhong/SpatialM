dp2ToF <- !is.null(dp2)
meshToF <- is.null(mesh)
spdeIndex <- is.null(prior.range)
if(meshToF){mesh <- fnCreateMesh(de1,de2,bd)}
# Create spde and index
if(spdeIndex){
spde = inla.spde2.matern(mesh = mesh, alpha = 2, constr = T)
} else {
spde = inla.spde2.pcmatern(
mesh = mesh,
prior.range = prior.range,
prior.sigma = prior.sigma)
}
indexs <- inla.spde.make.index("s", spde$n.spde)
# Projection matrices for points (estimation point and prediction point)
if(de1ToF){Ae1 <- inla.spde.make.A(mesh = mesh, loc = as.matrix(st_coordinates(de1)[ , c(1,2)]))}
if(dp1ToF){Ap1 <- inla.spde.make.A(mesh = mesh, loc = as.matrix(st_coordinates(dp1)[ , c(1,2)]))}
# Create projection matrix A for areas (estimation area and prediction area)
if(de2ToF){Ae2 <- fnProjectionMatrixArea(de2, mesh)}
if(dp2ToF){Ap2 <- fnProjectionMatrixArea(dp2, mesh)}
stk.e1 = NULL
stk.e2 = NULL
stk.p1 = NULL
stk.p2 = NULL
# estimation point (de1), estimation area (de2), prediction point (dp1), prediction area (dp2)
if(de1ToF){stk.e1 <- inla.stack(tag = "est1", data = list(y = de1$pvalue), A = list(1, Ae1), effects = list(data.frame(b0 = rep(1, nrow(de1))), s = indexs$s))}
if(de2ToF){stk.e2 <- inla.stack(tag = "est2", data = list(y = de2$avalue), A = list(1, Ae2), effects = list(data.frame(b0 = rep(1, nrow(de2))), s = indexs$s))}
if(dp1ToF){stk.p1 <- inla.stack(tag = "pred1", data = list(y = NA), A = list(1, Ap1), effects = list(data.frame(b0 = rep(1, nrow(dp1))), s = indexs$s))}
if(dp2ToF){stk.p2 <- inla.stack(tag = "pred2", data = list(y = NA), A = list(1, Ap2), effects = list(data.frame(b0 = rep(1, nrow(dp2))), s = indexs$s))}
# construct stack full with the data we have # stk.full <- inla.stack(stk.e1, stk.p1)
stk.full <- do.call(inla.stack, list(stk.e1, stk.e2, stk.p1, stk.p2)[c(de1ToF, de2ToF, dp1ToF, dp2ToF)])
formula <- y ~ 0 + b0 + f(s, model = spde)
# Call inla()
res <- inla(formula, family = "gaussian", data = inla.stack.data(stk.full),
control.predictor = list(compute = TRUE, link = 1, A = inla.stack.A(stk.full)))
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, "pred1", dp1)}
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)}
# Retrieve predictions
fnRetrievePredictions <- function(stack, res, tag, dataset){
index <- inla.stack.index(stack = stack, tag = tag)$data
dataset$pred_mean <- res$summary.fitted.values[index, "mean"]
dataset$pred_ll <- res$summary.fitted.values[index, "0.025quant"]
dataset$pred_ul <- res$summary.fitted.values[index, "0.975quant"]
return(dataset)
}
# Retrieve predictions points
# Predictions points
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)}
# Predictions areas
if(dp2ToF){dp2 <- fnRetrievePredictions(stk.full, res, "pred2", dp2)}
View(dp1)
index <- inla.stack.index(stack = stack, tag = tag)$data
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)}
View(dp1)
dp1 <- dppoint
dep1$pred_mean <- res$summary.fitted.values[index, "mean"]
index <- inla.stack.index(stack = stack, tag = tag)$data
stack = stk.full
tag = 'pred'
tag = 'pred1'
index <- inla.stack.index(stack = stack, tag = tag)$data
dp1$pred_mean <- res$summary.fitted.values[index, "mean"]
View(dp1)
# Retrieve predictions
fnRetrievePredictions <- function(stack, res, tag, dataset){
index <- inla.stack.index(stack = stack, tag = tag)$data
dataset$pred_mean <- res$summary.fitted.values[index, "mean"]
dataset$pred_ll <- res$summary.fitted.values[index, "0.025quant"]
dataset$pred_ul <- res$summary.fitted.values[index, "0.975quant"]
return(dataset)
}
dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)}
View(dp1)
dp1 <- dppoint
View(dp1)
if(dp1ToF){dp1 <- fnRetrievePredictions(stk.full, res, "pred1", dp1)}
setwd("~/Documents/Project 1/resources/sptialM/arealdata")
dearea = st_read('dearea.shp')
ggplot(data = dearea) +
geom_sf(aes(fill = avalue))
setwd("~/Documents/Project 1/data")
#st_transform(bd.sf, proN)
p.df = read.csv("2016PM2.5_avg.csv")
p.df = p.df[,c(2,3,4)]
colnames(p.df)<-c('pvalue','y','x')
depoint = p.df %>%
st_as_sf(coords = c("x", "y"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
proN = 4326
setwd("~/Documents/Project 1/data")
#st_transform(bd.sf, proN)
p.df = read.csv("2016PM2.5_avg.csv")
p.df = p.df[,c(2,3,4)]
colnames(p.df)<-c('pvalue','y','x')
depoint = p.df %>%
st_as_sf(coords = c("x", "y"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
head(depoint)
dppoint <- depoint
dparea <- dearea
library(rgeoboundaries)
bd = geoboundaries("United Kingdom")
location = as.matrix(st_coordinates(depoint)[ , c(1,2)])
mesh = fnCreateMesh(depoint, NULL, bd = bd)
source('fnPredictMelding.r')
location = as.matrix(st_coordinates(depoint)[ , c(1,2)])
mesh = fnCreateMesh(depoint, NULL, bd = bd)
plot(mesh)
points(location,col =2)
geopre = fnPredictMelding(depoint =  depoint, dearea = NULL, dppoint = dppoint, dparea = NULL, mesh = mesh)
ggplot(data = bd) + geom_sf() + geom_sf(data = geopre[[1]],aes(geometry = geometry,color=pred_mean))
mesh2 = fnCreateMesh(depoint = NULL,dearea, bd = bd)
arealpre = fnPredictMelding(depoint =  NULL, dearea = dearea, dppoint = NULL, dparea = dparea, mesh = mesh2)
View(arealpre)
ggplot(data = bd) + geom_sf() + geom_sf(data = geopre[[1]],aes(geometry = geometry,color=pred_mean))
ggplot(data = bd) + geom_sf() + geom_sf(data = arealpre [[2]],aes(geometry = geometry,color=pred_mean))
arealpre [[2]]
ggplot() +
geom_sf(data = arealpre [[2]], aes(geometry = geometry, fill = pred_mean)) +
geom_sf(data = bd, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(title = "Average Pm 2.5  Level 2016, UK", fill = "PM 2.5")
ggplot(data = bd) + geom_sf() + geom_sf(data = geopre[[1]],aes(geometry = geometry,color=pred_mean))+
labs(title = "Average Pm 2.5  Level 2016, UK", fill = "PM 2.5")
mesh_meld = fnCreateMesh(depoint = depoint,dearea, bd = bd)
mesh_meld = fnCreateMesh(depoint = depoint,dearea, bd = bd)
plot(mesh_meld)
mesh_meld = fnCreateMesh(depoint = depoint,dearea, bd = bd)
meldpre = fnPredictMelding(depoint =  depoint, dearea = dearea, dppoint = dppoint, dparea = dparea, mesh = mesh_meld)
head(meldpre[[2]])
mesh_meld = fnCreateMesh(depoint = depoint,dearea, bd = bd)
meldpre = fnPredictMelding(depoint =  depoint, dearea = dearea, dppoint = dppoint, dparea = dparea, mesh = mesh_meld)
head(meldpre[[2]])
head(arealpre[[2]])
meldpre[[2]]
head(geopre[[1]])
plot(1:74, geopre[[1]]$pvalue)
plot(1:74, geopre[[1]]$pvalue)
points(1:74, geopre[[1]]$pred_mean, col = red)
plot(1:74, geopre[[1]]$pvalue)
points(1:74, geopre[[1]]$pred_mean, col = 2)
plot(1:74, geopre[[1]]$pvalue)
lines(1:74, geopre[[1]]$pred_mean, col = 2)
# points()
plot(1:74, geopre[[1]]$pvalue)
lines(1:74, geopre[[1]]$pred_mean, col = 2)
lines(1:74, meldpre[[1]]$pred_mean, col = 2)
plot(1:74, geopre[[1]]$pvalue)
lines(1:74, geopre[[1]]$pred_mean, col = 2)
lines(1:74, meldpre[[1]]$pred_mean, col = 3)
plot(1:74, geopre[[1]]$pvalue)
lines(1:74, geopre[[1]]$pred_mean, col = 2)
lines(1:74, meldpre[[1]]$pred_mean, col = 3)
legend('bottomright', c('Melding','Geo'),lty = 1, col = c(3,2) )
c(class(depoint)[[1]],class(dppoint)[[1]],
class(dparea)[[1]],class(dearea)[[1]]) %!in% c("sf", "NULL")
class(bd) %!in% c("sf", "NULL")
class(bd) %in% c("sf", "NULL")
c(class(depoint)[[1]],class(dppoint)[[1]],
class(dparea)[[1]],class(dearea)[[1]]) %in% c("sf", "NULL")
class(bd) %in% c("sf", "NULL")
class(bd[1]) %in% c("sf", "NULL")
class(bd)[1] %in% c("sf", "NULL")
st_join(dearea,bd)
bd
nrow(dearea)
nrow(st_join(dearea,bd))
st_join(bd,dearea)
st_within(dparea,bd)
st_within(dparea,bd)
st_within(bd,dparea)
is.null(dearea) == F && nrow(dparea) !=  nrow(st_join(dparea,bd)
nrow(dparea) !=  nrow(st_join(dparea,bd))
nrow(dparea)
nrow(st_join(dparea,bd))
if(is.null(dearea) == F && nrow(dparea) !=  nrow(st_join(dparea,bd))){
stop("predicted area should be within boundary")
}
if(is.null(dppoint) == F && nrow(dppoint) !=  nrow(st_join(dppoint,bd))) stop("predicted area should be within boundary")
de1 <- depoint
de2 <- dearea
# datasets prediction
dp1 <- dppoint
dp2 <- dparea
# check I pass at least de1 or de2 to fit the model
# check I pass at least dp1 or dp2 to predict
# check formats are OK
# check CRS points and areas are the same.
fnCheckInputsMelding(de1, de2, dp1, dp2, bd)
fnCheckInputsMelding = function(depoint, dearea, dppoint, dparea, bd) {
if (is.null(dearea) == T && is.null(depoint) == T) stop("'Valid estimation data input required'")
if (is.null(dparea) == T && is.null(dppoint) == T) stop("'Valid preidction data input required'")
if(sum(c(class(depoint)[[1]],class(dppoint)[[1]],
class(dparea)[[1]],class(dearea)[[1]]) %in% c("sf", "NULL")) != 4)
stop("'All input data should be 'sf' obj")
if(is.null(depoint) == F && sum(c("pvalue", "geometry") %in% colnames(depoint)) != 2 )
stop("'depoint' must have 'geometry','pvalue' as column names")
if(is.null(dearea) == F && sum(c("avalue", "geometry") %in% colnames(dearea)) != 2 )
stop("'dearea' must have 'avalue','geometry', as column names")
if(st_crs(depoint) != st_crs(dearea) && sum(c(is.null(depoint),is.null(dearea))) == 0){
stop('all the input data must have the same crs, use st_crs() to check your data')
}
if(is.null(dparea) == F  && sum(c(st_crs(dparea) == st_crs(depoint),st_crs(dparea) == st_crs(dearea))) == 0){
stop('all the input data must have the same crs, use st_crs() to check your data')
}
if(is.null(dppoint) == F && sum(c(st_crs(dppoint) == st_crs(depoint),st_crs(dppoint) == st_crs(dearea))) == 0){
stop('all the input data must have the same crs, use st_crs() to check your data')
}
}
de1 <- depoint
de2 <- dearea
# datasets prediction
dp1 <- dppoint
dp2 <- dparea
# check I pass at least de1 or de2 to fit the model
# check I pass at least dp1 or dp2 to predict
# check formats are OK
# check CRS points and areas are the same.
fnCheckInputsMelding(de1, de2, dp1, dp2, bd)
location = as.matrix(st_coordinates(depoint)[ , c(1,2)])
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
#source('fnPredictMelding.r')
proN = 4326
#setwd("~/Documents/Project 1/resources/sptialM")
p.df = read.csv("pointdata.csv")
p.df = p.df[,c(2,3,4)]
colnames(p.df)<-c('pvalue','y','x')
depoint = p.df %>%
st_as_sf(coords = c("x", "y"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
head(depoint)
dppoint <- depoint
dparea <- dearea
location = as.matrix(st_coordinates(depoint)[ , c(1,2)])
mesh = fnCreateMesh(depoint, NULL, bd = bd)
plot(mesh)
points(location,col =2)
packages <- c('raster','rgdal', 'rnaturalearth', 'viridis','rnaturalearthhires',
'sf','INLA','rgeoboundaries','tidyverse')
package.check <- lapply(packages, FUN = function(x){
if(!require(x ,character.only = T)){install.packages(x)}
if(!(x %in% ( .packages()  ) ) ){library(x ,character.only = T)}
})
theme_set(theme_minimal())
options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
source("fnCheckInputsMelding.R")
source("fnCreateMesh.R")
source("fnPredictMelding.R")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)
ggplot(boundaryregion) + geom_sf()
depoint <- read.csv("pointdata.csv")
depoint <- depoint[, c(2, 3, 4)]
colnames(depoint) <- c('value', 'y', 'x')
depoint <- depoint %>% st_as_sf(coords = c("x", "y"), dim = "XY") %>%
st_set_crs(crsproj) %>% st_cast("MULTIPOINT")
head(depoint)
ggplot(data = boundaryregion) + geom_sf() +
geom_sf(data = depoint, aes(col = value))
# TODO. Put name column value not avalue
dearea <- st_read("arealdata/dearea.shp")
dearea$value <- dearea$avalue
ggplot(data = boundaryregion) + geom_sf() +
geom_sf(data = dearea, aes(fill = value))
# Create mask
# TODO: create better mask. Now some cells are outside the border
# br <- boundaryregion %>% st_geometry() %>% st_cast('POLYGON') %>% st_union()
# brbbox <- br %>% st_bbox()
# brbbox <- brbbox %>% st_as_sfc() %>% st_as_sf()
# mask <- st_difference(brbbox, br)
#
# ggplot(data = boundaryregion) + geom_sf() +
# geom_sf(data = dearea, aes(fill = value)) +
#   geom_sf(data = us_mask, fill = 'white')
# Bounding box of the boundary of the region of study
bb <- unname(attributes(st_geometry(boundaryregion))$bbox)
# Grid
x <- seq(bb[1] - 1, bb[3] + 1, length.out = 50)
y <- seq(bb[2] - 1, bb[4] + 1, length.out = 50)
coop <- expand.grid(x, y)
coop_sf <- sf::st_as_sf(coop, coords = c('Var1','Var2'), crs = crsproj)
ggplot()+geom_sf(data = coop_sf)
# Transform matrix data to sf objet
dpcontsurface <- coop_sf %>% st_join(boundaryregion, left = FALSE)
ggplot(dpcontsurface) + geom_sf()
ggplot(data = boundaryregion) + geom_sf() +
geom_sf(data = dpcontsurface)
mesh <- fnCreateMesh(depoint, boundaryregion)
plot(mesh)
mesh <- fnCreateMesh(depoint, boundaryregion)
plot(mesh)
points(as.matrix(st_coordinates(depoint)[ , c(1, 2)]), col = 2)
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
glo_pm = raster(str_name)
rr <- mask(crop(glo_pm, bd.sf), bd.sf)
fa = 30
ra <- raster:: aggregate(rr, fact = fa, fun = mean)
spol<-rasterToPolygons(ra, dissolve = F)
area.sf = st_as_sf(spol)
st_transform(area.sf, proN)
colnames(area.sf) = c('value','geometry')
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
setwd("~/Documents/Project 1/data")
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
glo_pm = raster(str_name)
rr <- mask(crop(glo_pm, bd.sf), bd.sf)
fa = 30
ra <- raster:: aggregate(rr, fact = fa, fun = mean)
spol<-rasterToPolygons(ra, dissolve = F)
area.sf = st_as_sf(spol)
st_transform(area.sf, proN)
colnames(area.sf) = c('value','geometry')
setwd("~/Documents/Project 1/data")
bd.sf = geoboundaries("United Kingdom")
st_transform(bd.sf, proN)
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
glo_pm = raster(str_name)
rr <- mask(crop(glo_pm, bd.sf), bd.sf)
fa = 30
ra <- raster:: aggregate(rr, fact = fa, fun = mean)
raa <- mask(crop(ra, bd.sf), bd.sf)
spol<-rasterToPolygons(raa, dissolve = F)
area.sf = st_as_sf(spol)
st_transform(area.sf, proN)
colnames(area.sf) = c('value','geometry')
setwd("~/Documents/Project 1/resources/sptialM/areal data")
st_write(area.sf, paste0(getwd(), "/", "dearea.shp"), delete_layer = TRUE)
ggplot(data = area.sf) + geom_sf()
View(de1)
setwd("~/Documents/Project 1/resources/sptialM")
plot(rr)
glo_pm = raster(str_name)
setwd("~/Documents/Project 1/data/area_2016_pm2.5")
str_name<-'gwr_pm25_2016.tif'
glo_pm = raster(str_name)
area <- ne_states(country = "united kingdom", returnclass = "sf")
rr <- mask(crop(glo_pm, area), area)
plot(rr)
# description statistic
p = ggplot() +
geom_raster(data = r_df, aes(x = x, y = y, fill = pm2.5)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(title = "Average Pm 2.5  Level 2016, UK", fill = "PM 2.5")
# description statistic
p = ggplot() +
geom_raster(data = rr, aes(x = x, y = y, fill = pm2.5)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(title = "Average Pm 2.5  Level 2016, UK", fill = "PM 2.5")
p = ggplot() +
geom_raster(data = rr, aes(x = x, y = y, fill = pm2.5))
# description statistic
test_spdf <- as(rr, "SpatialPixelsDataFrame")
test_df <- as.data.frame(test_spdf)
colnames(test_df) <- c("value", "x", "y")
View(test_df)
p = ggplot() +
geom_raster(data = test_df, aes(x = x, y = y, fill = value)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(title = "Average Pm 2.5  Level 2016, UK", fill = "PM 2.5")
p
# description statistic
p = ggplot() +
geom_raster(data = r_df, aes(x = x, y = y, fill = pm2.5)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(fill = "PM 2.5")
# description statistic
test_spdf <- as(rr, "SpatialPixelsDataFrame")
test_df <- as.data.frame(test_spdf)
colnames(test_df) <- c("pm2.5", "x", "y")
p = ggplot() +
geom_raster(data = test_df, aes(x = x, y = y, fill = pm2.5)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(fill = "PM 2.5")
# point data
point_data <- read.csv("~/Documents/Project 1/resources/data/2016PM2.5_avg copy.csv")
setwd("~/Documents/Project 1/resources/sptialM")
# point data
point_data <- read.csv("pointdata.csv")
View(point_data)
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
scale_color_gradient(name = "Level of Air pollution", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
scale_color_gradient(name = "Monitoring PM 2.5", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
p = ggplot() +
geom_raster(data = test_df, aes(x = x, y = y, fill = pm2.5)) +
geom_sf(data = area, inherit.aes = FALSE, fill = NA) +
scale_fill_viridis() +
theme_minimal() +
labs(fill = "Satellite-derived PM 2.5")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "yellow") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
#scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "yellow") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 3) +
scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 2) +
scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
# p
#
p+geom_point(data = point_data, aes(x = longitude, y = latitude,
#                                    shape = new_site_type,
color = mean), size = 1) +
scale_color_gradient(name = "Monitored PM 2.5", low = "blue", high = "red") +
#scale_shape_discrete(name = "Site type") +
labs(x = "Longitude", y = "Latitude")
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
de1 <- depoint
de2 <- dearea
# datasets prediction
dp1 <- dppoint
dp2 <- dparea
knitr::opts_chunk$set(echo = TRUE)
source("fnCheckInputsDown.R")
source("fnCreateMesh.R")
source("fnPredictDown.R")
packages <- c( 'viridis','rnaturalearthhires',
'sf','INLA','rgeoboundaries','tidyverse')
package.check <- lapply(packages, FUN = function(x){
if(!require(x ,character.only = T)){install.packages(x)}
if(!(x %in% ( .packages()  ) ) ){library(x ,character.only = T)}
})
theme_set(theme_minimal())
options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
dearea <- st_read("arealdata/dearea.shp")
setwd("~/Documents/Project 1/resources/sptialM")
dearea <- st_read("arealdata/dearea.shp")
dearea <- st_read("arealdata/dearea.shp")
View(dearea)
