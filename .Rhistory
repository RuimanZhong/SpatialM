source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
p.sf = area.sf
# Projection Matrix
Ap = inla.spde.make.A(mesh, as.matrix(st_coordinates(p.sf[,1]))[,c(1,2)])
Apre = inla.spde.make.A(mesh = mesh, loc = as.matrix (st_coordinates(area.pre[,1])))
area.pre = area.pre(pre.sf,cell.x,cell.y,proN =proN)
Apre = inla.spde.make.A(mesh = mesh, loc = as.matrix (st_coordinates(area.pre[,1])))
dim(Ap)
dim(Apre)
#construct SPDE
spde = inla.spde2.pcmatern(
mesh = mesh,
prior.range = prior.range,
prior.sigma = prior.sigma)
# construct stack
indexs = inla.spde.make.index("s", spde$n.spde)
p.sf = area.sf
colnames(p.sf)<-c('value','geometry')
View(p.sf)
stk.e <- inla.stack(
tag = "est",
data = list(y = p.sf$value),
A = list(1, Ap),
effects = list(data.frame(b0 = rep(1, nrow(p.sf))), s = indexs)
)
stk.a <- inla.stack(tag= 'areal',data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list(s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)))))
View(area.sf)
stk.a <- inla.stack(tag= 'areal',data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list(s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)))))
st_rook = function(a, b = a) st_relate(a, b, pattern = "F***1****")
st_rook(grd)
nc %>% mutate(NB_ROOK = st_rook(.))
sf::nc
install.packages("spdep")
library(spdep)
nc %>% mutate(NB_ROOK = st_rook(.))
data(nc)
nc <- st_read(system.file("shapes/sids.shp", package="spData")[1], quiet=TRUE)
st_crs(nc) <- "+proj=longlat +datum=NAD27"
row.names(nc) <- as.character(nc$FIPSNO)
class(nc)
nc %>% mutate(NB_ROOK = st_rook(.))
demo(nc, ask = FALSE, verbose = FALSE)
nc %>% mutate(NB_ROOK = st_rook(.))
View(nc)
area.sf %>% mutate(NB_ROOK = st_rook(.))
ncovr_rook <- st_rook(ncovr)
source('areal.R')
source('meld_v3.R')
source('geosp.R')
source('mesh.R')
source('areal.R')
source('check.r')
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
setwd("~/Documents/Project 1/resources/sptialM")
source('mesh.R')
source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
setwd("~/Documents/Project 1/resources/sptialM")
source('mesh.R')
source('mesh.R')
source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
bd.sf <- geoboundaries("United Kingdom")
pre.sf = bd.sf
cutoff = 0.25
max.edge = c(0.7, 0.7)
offset = c(-0.05, -0.05)
prior.range = c(2, 0.01)
prior.sigma = c(10, 0.01)
proN = 4326
cell.x = 50
cell.y =50
# point data, load the data when wd is on data
setwd("~/Documents/Project 1/data")
st_transform(bd.sf,proN)
p.df <- read.csv("2016PM2.5_avg.csv")
p.df = p.df[,c(2,3,4)]
colnames(p.df)<-c('value.p','py','px')
p.sf = p.df %>%
st_as_sf(coords = c("px", "py"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
# area data, load the data when wd is on data
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
glo_pm = raster(str_name)
rr <- mask(crop(glo_pm, bd.sf), bd.sf)
fa = 30
ra <- raster:: aggregate(rr, fact = fa, fun = mean)
spol<-rasterToPolygons(ra, dissolve = F)
area.sf =st_as_sf(spol)
area.sf = st_transform(area.sf,proN)
colnames(area.sf)<-c('value.a','geometry')
ggplot(data = p.sf$geometry)+geom_sf()
mesh = Mesh(bd.sf,max.edge,cut.off = 0.25,offset)
plot(mesh)
a = dwscaler.spde (mesh, area.pre,
prior.range = c(2, 0.01),
prior.sigma = c(10, 0.01),
p.sf, area.sf)
p.sf = p.df %>%
st_as_sf(coords = c("px", "py"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
a = dwscaler.spde (mesh, area.pre,
prior.range = c(2, 0.01),
prior.sigma = c(10, 0.01),
p.sf, area.sf)
area.pre = area.pre(pre.sf, cell.x, cell.y, proN = proN)
a = dwscaler.spde (mesh, area.pre,
prior.range = c(2, 0.01),
prior.sigma = c(10, 0.01),
p.sf, area.sf)
formula = y ~ 0 + b0 + f(s, model = spde)
b_1=meld(formula =formula, mesh = mesh,
p.sf = p.sf, area.pre = area.pre,
prior.range = c(2, 0.01), prior.sigma = c(10, 0.01))
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf= area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
View(area.pre)
View(area.sf)
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
message(class(area.pre))
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
locin_pred = st_join(area.pre, area.sf, left = F)
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
source('meld_v3.R')
setwd("~/Documents/Project 1/resources/sptialM")
source('meld_v3.R')
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
source('meld_v3.R')
source('meld_v3.R')
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
source('meld_v3.R')
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
source('meld_v3.R')
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
locin_pred = st_join(area.pre, area.sf, left = F)
# Projection Matrix
meshcoo = data.frame(long = mesh$loc[,1], lat = mesh$loc[,2] )
meshin = meshcoo %>%
st_as_sf(coords = c("long", "lat"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
# find points in mesh n area.sf
locin = st_join(meshin, area.sf, left = F)
Aa = inla.spde.make.A (mesh = mesh,
loc = as.matrix(st_coordinates(locin[,1]))[,c(1,2)]
)
Apred = inla.spde.make.A (mesh = mesh,
loc = as.matrix (st_coordinates(area.pre[,1])
)
)
dim(Aa)
dim(Apre)
dim(Apred)
stk.a = inla.stack( tag= 'areal',
data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)
)
)
)
)
spde = inla.spde2.pcmatern(
mesh = mesh,
prior.range = prior.range,
prior.sigma = prior.sigma)
stk.a = inla.stack( tag= 'areal',
data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)
)
)
)
)
stk.pred = inla.stack( tag= 'pred',
data=list(y=NA),
A=list(Apred, 1),
effects=list(s=1:spde$n.spde,
data.frame(b0 =rep(1, nrow(locin_pred)
)
)
)
)
stk.a = inla.stack( tag= 'areal',
data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)
)
)
)
)
View(locin)
mesh = Mesh(bd.sf, max.edge, cut.off = 0.1, offset)
plot(mesh)
# find points in mesh n area.sf
locin = st_join(meshin, area.sf, left = F)
# Projection Matrix
meshcoo = data.frame(long = mesh$loc[,1], lat = mesh$loc[,2] )
meshin = meshcoo %>%
st_as_sf(coords = c("long", "lat"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
# find points in mesh n area.sf
locin = st_join(meshin, area.sf, left = F)
Aa = inla.spde.make.A (mesh = mesh,
loc = as.matrix(st_coordinates(locin[,1]))[,c(1,2)]
)
Apred = inla.spde.make.A (mesh = mesh,
loc = as.matrix (st_coordinates(area.pre[,1])
)
)
dim(Aa)
dim(Apred)
spde$n.spde
stk.a = inla.stack( tag= 'areal',
data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(locin$value.a)
)
)
)
)
stk.a = inla.stack( tag= 'areal',
data=list(y=area.sf$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(area.sf$value.a)
)
)
)
)
stk.a = inla.stack( tag= 'areal',
data=list(y=locin$value.a),
A=list(Aa, 1),effects=list( s=1:spde$n.spde,
data.frame(b0 =rep(1, length(locin$value.a)
)
)
)
)
stk.pred = inla.stack( tag= 'pred',
data=list(y=NA),
A=list(Apred, 1),
effects=list(s=1:spde$n.spde,
data.frame(b0 =rep(1, nrow(locin_pred)
)
)
)
)
inla.stack(stk.a, stk.pred)
c = meld(mesh,area.pre,
p.sf,area.sf,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01),proN)
c = meld(formula =formula,
mesh = mesh, area.pre = area.pre,
p.sf = p.sf,area.sf = area.sf,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01),proN = proN)
stk.full = stack.full.areal(Aa,Apred,area.sf,locin_pred,spde)
source('meld_v3.R')
stk.full = stack.full.areal(Aa,Apred,area.sf,locin_pred,spde)
res = inla ( formula,
data = inla.stack.data(stk.full),
control.predictor = list(
compute = TRUE,
A = inla.stack.A(stk.full)
)
)
b_2 = meld(formula =formula,
mesh = mesh, p.sf = NULL,
area.sf = area.sf,
area.pre = area.pre,
prior.range = c(2, 0.01),prior.sigma = c(10, 0.01))
setwd("~/Documents/Project 1/resources/sptialM")
class(mesh)
devtools::document()
install.packages("devtools")
devtools::document()
library(devtools)
document()
source('check.r')
area.pre = function(bd.sf =  NULL,pre.sf = NULL, pre.p = NULL,
cell.x = NULL, cell.y = NULL, proN = 4326) {
if(is.null(bd.sf) == F) {
pre.sf = st_transform(bd.sf, proN)
bb = unname(attributes(st_geometry(pre.sf))$bbox)
x = seq(bb[1] - 1, bb[3] + 1, length.out = cell.x)
y = seq(bb[2] - 1, bb[4] + 1, length.out = cell.y)
coop = expand.grid(x, y)
coop_sf = sf::st_as_sf(coop, coords = c('Var1','Var2'), crs = proN)
pre.sf = pre.sf%>%
st_set_crs(proN)
return(
coop_sf %>%
st_join(pre.sf, left = FALSE)
)
}
if(is.null(pre.sf) == F && is.null(pre.p) == T) {
return(pre.sf)
}
if(is.null(pre.p) == F && is.null(pre.sf) == T) {
return(st_convex_hull(st_union(pre.p)))
}
}
pre = area.pre(pre.p = p.sf)
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
pre = area.pre(pre.p = p.sf)
ggplot(pre)+geom_sf()
View(pre)
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
setwd("~/Documents/Project 1/resources/sptialM")
source('mesh.R')
source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
area.pre = target(bd.sf = pre.sf, cell.x =cell.x,cell.y =  cell.y, proN = proN)
View(area.pre)
point = area.pre$geometry
class(point)
point = area.pre
point.pre = target(pre.p = point)
m1 = cbind(c(0, 0, 1, 0), c(0, 1, 1, 0))
m2 = cbind(c(0, 1, 1, 0), c(0, 0, 1, 0))
pol = st_sfc(st_polygon(list(m1)), st_polygon(list(m2)))
set.seed(1985)
d = data.frame(matrix(runif(15), ncol = 3))
p = st_as_sf(x = d, coords = 1:2)
plot(pol)
plot(p, add = TRUE)
View(p)
(p_ag1 = aggregate(p, pol, mean))
View(p_ag1)
plot(pol)
View(pol)
pol
View(area.sf)
View(pol)
group = area.sf$geometry
a = dwscaler.spde (mesh, area.pre,
prior.range = c(2, 0.01),
prior.sigma = c(10, 0.01),
p.sf, area.sf)
View(a)
View(a)
p = a[[1]][["pred_mean"]]
View(a)
p = a[[1]]
View(p)
source('mesh.R')
source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
a = dwscaler.spde (mesh, area.pre,
prior.range = c(2, 0.01),
prior.sigma = c(10, 0.01),
p.sf, area.sf)
View(a)
p.sf = a %>%
st_as_sf(coords = c("px", "py"), dim = "XY") %>%
st_set_crs(proN) %>%
st_cast("MULTIPOINT")
View(p.sf)
p_ag1 = aggregate(p.sf, group, mean)
View(p_ag1)
ggplot(p.sf)+geom_sf()
source('mesh.R')
source('check.r')
source('dwscalerv2.R')
source('tarConstr.R')
source('meld_v3.R')
source('check.r')
source('areal.R')
source('mesh.R')
source('geosp.R')
packages = c('raster','rgdal',
'rnaturalearth',
'viridis','rnaturalearthhires','sf','INLA','rgeoboundaries','tidyverse')
package.check = lapply(packages, FUN =function(x){
if(!require(x ,character.only = T))
install.packages(x)
if(!(x %in% ( .packages()  ) ) )
library(x ,character.only = T)})
setwd("~/Documents/Project 1/data")
str_name<-'area_2016_pm2.5/gwr_pm25_2016.tif'
glo_pm = raster(str_name)
rr <- mask(crop(glo_pm, bd.sf), bd.sf)
fa = 30
ra <- raster:: aggregate(rr, fact = fa, fun = mean)
spol<-rasterToPolygons(ra, dissolve = F)
area.sf = st_as_sf(spol)
st_transform(area.sf, proN)
colnames(area.sf) = c('value.a','geometry')
mesh = Mesh(area.sf,cut.off = 0.1)
bd.sf <- geoboundaries("United Kingdom")
mesh = Mesh(area.sf,cut.off = 0.1)
check_mesh(area.sf)
area.sf$centroids = st_transform(area.sf, proN) %>%
st_centroid()
proN = 4326
cell.x = 50
cell.y =50
area.sf$centroids = st_transform(area.sf, proN) %>%
st_centroid()
bd = st_union(area.sf)
bd.ss  = as(bd,Class = 'Spatial')
max.edge = max(attributes(st_geometry(area.sf))$bbox[3] -attributes(st_geometry(area.sf))$bbox[1],
attributes(st_geometry(area.sf))$bbox[4] -attributes(st_geometry(area.sf))$bbox[2])/10
inla.mesh.2d(
boundary = bd.ss,
max.edge = max.edge, cutoff = cutoff,
offset = offset)
)
inla.mesh.2d(
boundary = bd.ss,
max.edge = max.edge, cutoff = cutoff,
offset = offset)
mesh = Mesh(area.sf,cut.off = 0.1)
source('check.r')
source('areal.R')
source('mesh.R')
source('geosp.R')
setwd("~/Documents/Project 1/resources/sptialM")
source('check.r')
source('areal.R')
source('mesh.R')
source('geosp.R')
mesh = Mesh(area.sf,cut.off = 0.1)
plot(mesh)
offset = c(-0.05, -0.05)
mesh = inla.mesh.2d(
boundary = bd.ss,
max.edge = max.edge, cutoff = cutoff,
offset = offset)
plot(mesh)
