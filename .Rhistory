pennLC$data$age
), ]
E <- expected(
population = pennLC$data$population,
cases
ï¼‰
library(dplyr)
d <- group_by(pennLC$data, county) %>% summarize(Y = sum(cases))
head(d)
d <- aggregate(
x = pennLC$data$cases,
by = list(county = pennLC$data$county),
FUN = sum
)
names(d) <- c("county", "Y")
pennLC$data <- pennLC$data[order(
pennLC$data$county,
pennLC$data$race,
pennLC$data$gender,
pennLC$data$age
), ]
E <- expected(
population = pennLC$data$population,
cases = pennLC$data$cases, n.strata = 16
)
library(dplyr)
d <- group_by(pennLC$data, county) %>% summarize(Y = sum(cases))
head(d)
d <- aggregate(
x = pennLC$data$cases,
by = list(county = pennLC$data$county),
FUN = sum
)
names(d) <- c("county", "Y")
pennLC$data <- pennLC$data[order(
pennLC$data$county,
pennLC$data$race,
pennLC$data$gender,
pennLC$data$age
), ]
E <- expected(
population = pennLC$data$population,
cases = pennLC$data$cases, n.strata = 16
)
d$E <- E[match(d$county, unique(pennLC$data$county))]
head(d)
d$SIR <- d$Y / d$E
map <- merge(map, d)
mapsf <- st_as_sf(map)
ggplot(mapsf) + geom_sf(aes(fill = SIR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red"
) +
theme_bw()
formula <- Y ~
f(idareau, model = "besag", graph = g, scale.model = TRUE) +
f(idareav, model = "iid")
knitr::opts_chunk$set(echo = TRUE)
map$idarea <- 1:nrow(map@data)
prior <- list(
prec = list(
prior = "pc.prec",
param = c(0.5 / 0.31, 0.01)),
phi = list(
prior = "pc",
param = c(0.5, 2 / 3))
)
library(spdep)
nb <- poly2nb(map)
head(nb)
#install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(SpatialEpi)
library(spdep)
library(sf)
res <- inla(formula,
family = "poisson", data = map@data,
E = E, control.predictor = list(compute = TRUE)
)
nb2INLA("map.adj", nb)
g <- inla.read.graph(filename = "map.adj")
formula <- Y ~ f(idarea, model = "bym2", graph = g, hyper = prior)
res <- inla(formula,
family = "poisson", data = map@data,
E = E, control.predictor = list(compute = TRUE)
)
summary(res)
#summaries of the relative risks including the mean posterior and the lower and upper limits of 95% credible intervals of the relative risks
head(res$summary.fitted.values)
map$RR <- res$summary.fitted.values[, "mean"]
map$LL <- res$summary.fitted.values[, "0.025quant"]
map$UL <- res$summary.fitted.values[, "0.975quant"]
summary(map@data[, c("RR", "LL", "UL")])
map$RR <- res$summary.fitted.values[, "mean"]
map$LL <- res$summary.fitted.values[, "0.025quant"]
map$UL <- res$summary.fitted.values[, "0.975quant"]
summary(map@data[, c("RR", "LL", "UL")])
mapsf <- st_as_sf(map)
gRR <- ggplot(mapsf) + geom_sf(aes(fill = RR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
#install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(SpatialEpi)
library(spdep)
library(sf)
library(ggplot2)
map$RR <- res$summary.fitted.values[, "mean"]
map$LL <- res$summary.fitted.values[, "0.025quant"]
map$UL <- res$summary.fitted.values[, "0.975quant"]
summary(map@data[, c("RR", "LL", "UL")])
mapsf <- st_as_sf(map)
gRR <- ggplot(mapsf) + geom_sf(aes(fill = RR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
gRR <- ggplot(mapsf) + geom_sf(aes(fill = RR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
map$RR <- res$summary.fitted.values[, "mean"]
map$LL <- res$summary.fitted.values[, "0.025quant"]
map$UL <- res$summary.fitted.values[, "0.975quant"]
summary(map@data[, c("RR", "LL", "UL")])
mapsf <- st_as_sf(map)
gRR <- ggplot(mapsf) + geom_sf(aes(fill = RR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
gUL <- ggplot(mapsf) + geom_sf(aes(fill = UL)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
gLL <- ggplot(mapsf) + geom_sf(aes(fill = LL)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red",
limits = c(0.7, 1.5)
) +
theme_bw()
library(cowplot)
library(cowplot)
plot_grid(gRR, gLL, gUL, ncol = 1)
plot_grid(gRR, gLL, gUL, ncol = 1)
mapsf$re <- res$summary.random$idarea[1:67, "mean"]
ggplot(mapsf) + geom_sf(aes(fill = re)) +
scale_fill_gradient2(
midpoint = 0, low = "blue", mid = "white", high = "red"
) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(geoR)
install.packages("geoR")
library(geoR)
library(geoR)
library(geoR)
install.packages("RandomFieldsUtils")
install.packages("RandomFieldsUtils")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(SpatialEpi)
library(spdep)
library(sf)
library(ggplot2)
map <- pennLC$spatial.polygon
plot(map)
nb <- poly2nb(map)
head(nb) # output neighbors of each location
# set elements of spatial neighborhood matrices (choose 2, 44, 58)
d <- data.frame(county = names(map), neigh = rep(0, length(map)))
rownames(d) <- names(map)
map <- SpatialPolygonsDataFrame(map, d, match.ID = TRUE)
map$neigh[nb[[2]]] <- 1
map$neigh[nb[[44]]] <- 1
map$neigh[nb[[58]]] <- 1
#
coord <- coordinates(map)
map$long <- coord[, 1]
map$lat <- coord[, 2]
map$ID <- 1:dim(map@data)[1]
mapsf <- st_as_sf(map)
library(ggplot2)
ggplot(mapsf) + geom_sf(aes(fill = as.factor(neigh))) +
geom_text(aes(long, lat, label = ID), color = "white") +
theme_bw() + guides(fill = FALSE)
library(dplyr)
d <- group_by(pennLC$data, county) %>% summarize(Y = sum(cases))
head(d)
d <- aggregate(
x = pennLC$data$cases,
by = list(county = pennLC$data$county),
FUN = sum
)
names(d) <- c("county", "Y")
pennLC$data <- pennLC$data[order(
pennLC$data$county,
pennLC$data$race,
pennLC$data$gender,
pennLC$data$age
), ]
E <- expected(
population = pennLC$data$population,
cases = pennLC$data$cases, n.strata = 16
)
d$E <- E[match(d$county, unique(pennLC$data$county))]
head(d)
d$SIR <- d$Y / d$E
map <- merge(map, d)
mapsf <- st_as_sf(map)
ggplot(mapsf) + geom_sf(aes(fill = SIR)) +
scale_fill_gradient2(
midpoint = 1, low = "blue", mid = "white", high = "red"
) +
theme_bw()
formula <- Y ~
f(idareau, model = "besag", graph = g, scale.model = TRUE) +
f(idareav, model = "iid")
formula <- Y ~ f(idarea, model = "bym2", graph = g)
map$idarea <- 1:nrow(map@data)
prior <- list(
prec = list(
prior = "pc.prec",
param = c(0.5 / 0.31, 0.01)),
phi = list(
prior = "pc",
param = c(0.5, 2 / 3))
)
nb <- poly2nb(map)
head(nb)
nb2INLA("map.adj", nb)
g <- inla.read.graph(filename = "map.adj")
formula <- Y ~ f(idarea, model = "bym2", graph = g, hyper = prior)
res <- inla(formula,
family = "poisson", data = map@data,
E = E, control.predictor = list(compute = TRUE)
)
summary(res)
#summaries of the relative risks including the mean posterior and the lower and upper limits of 95% credible intervals of the relative risks
head(res$summary.fitted.values)
res$marginals.fitted.values
res$marginals.fitted.values
knitr::opts_chunk$set(echo = TRUE)
library(geoR)
library(geoR)
install.packages("RandomFieldsUtils")
# summary(res)
#summaries of the relative risks including the mean posterior and the lower and upper limits of 95% credible intervals of the relative risks
# head(res$summary.fitted.values)
res$marginals.fitted.values
View(res)
map$idarea <- 1:nrow(map@data)
prior <- list(
prec = list(
prior = "pc.prec",
param = c(0.5 / 0.31, 0.01)),
phi = list(
prior = "pc",
param = c(0.5, 2 / 3))
)
nb <- poly2nb(map)
head(nb)
nb2INLA("map.adj", nb)
g <- inla.read.graph(filename = "map.adj")
formula <- Y ~ f(idarea, model = "bym2", graph = g, hyper = prior)
res <- inla(formula,
family = "poisson", data = map@data,
E = E, control.predictor = list(compute = TRUE)
)
seq(from = 1, to = 100, by = 5)
rep(c(1,2,3,4), 3)
rep(c(1,2,3,4),each = 2)
seq(from = 1, length.out = 3)
data = seq(from = 1, to = 100, by = 5)
sample(data, 10)
sample(data, 10, replace = T)
options(digits=2)
sample(data, 10, replace = T)
x = 12.3545435
x
options(digits=2)
x
options(digits=8)
x = 12.3545435
x
y = c("a")
paste(x,y)
x = 12
paste(x,y)
paste0(x,y)
alphabet = paste0(LETTERS)
if (!require(openair)) {
install.packages("openair")
library(openair)
}
library(openair)
selected_data <- meta_data %>%
filter(variable == "PM2.5")
library(dplyr)
library(tidyverse)
meta_data <- importMeta(source = "aurn", all = TRUE)
head(meta_data, 3)
selected_data <- meta_data %>%
filter(variable == "PM2.5")
head(selected_data, 3)
View(selected_data)
gender = factor(c('female','male','unkown','female','male'),levels = c('male','female','unknown'))
library(dyplr)
library(dplyr)
library(tidyverse)
gneder2 = gender[gender ! = 'male']
gneder2 = gender[gender != 'male']
summary(gender2)
gender2 = gender[gender != 'male']
summary(gender2)
gender = factor(c('female','male','unknown','female','male'),levels = c('male','female','unknown'))
gender2 = gender[gender != 'male']
summary(gender2)
droplevels(gender2)
m2 <- matrix(1:12, nrow = 4, ncol = 3)
m2
rownames(m2) <- c("row1", "row2", "row3", "row4")
colnames(m2) <- c("col1", "col2", "col3")
#simplifying results in a named vector
m2[, 2]
which(is.na(df))
# Dataframe
df <- data.frame(col1 = 1:3,
col2 = c("this", "is", "text"),
col3 = c(TRUE, FALSE, TRUE),
col4 = c(2.5, 4.2, pi))
which(is.na(df))
which(is.na(df$col4))
# location of NA / how to find NA
x = as.vector(df$col4)
which(is.na(x))
# location of NA / how to find NA
colSums(is.na(df))
# location of NA / how to find NA
colSums(is.na(df))
# Dataframe
df <- data.frame(col1 = c(1:3, NA),
col2 = c("this", NA,"is", "text"),
col3 = c(TRUE, FALSE, TRUE, TRUE),
col4 = c(2.5, 4.2, 3.2, NA),
stringsAsFactors = FALSE)
# location of NA / how to find NA
colSums(is.na(df))
5/0
0/0
citation("dygraphs")
install.packages("dygraphs")
citation("dygraphs")
citation("plotly")
pnorm(3, 4, 1/4)
pnorm(3, 4, 1/4)
pnorm(3, 4, sqrt(1/2))/(pnorm(3,4, sqrt(1/2))+pnorm(3,6, sqrt(1/2)))
pnorm(5, 4, sqrt(1/2))/(pnorm(5,4, sqrt(1/2))+pnorm(7,6, sqrt(1/2)))
pnorm(5, 4, sqrt(1/2))/(pnorm(5,4, sqrt(1/2))+pnorm(5,6, sqrt(1/2)))
pnorm(7, 4, sqrt(1/2))/(pnorm(7,4, sqrt(1/2))+pnorm(7,6, sqrt(1/2)))
pnorm(7,6, sqrt(1/2))
pnorm(7,4, sqrt(1/2))
dnorm(7, 4, sqrt(1/2))/(dnorm(7,4, sqrt(1/2))+dnorm(7,6, sqrt(1/2)))
dnorm(3, 4, sqrt(1/2))/(dnorm(3,4, sqrt(1/2))+dnorm(3,6, sqrt(1/2)))
dnorm(5, 4, sqrt(1/2))/(dnorm(5,4, sqrt(1/2))+dnorm(5,6, sqrt(1/2)))
dnorm(5, 6, sqrt(1/2))/(dnorm(5,4, sqrt(1/2))+dnorm(5,6, sqrt(1/2)))
dnorm(7, 6, sqrt(1/2))/(dnorm(7,4, sqrt(1/2))+dnorm(7,6, sqrt(1/2)))
install.packages("rlang")
install.packages("rlang")
install.packages("osmdata")
library(rlang)
library(osmdata)
fnHighwayL <- function(box){
highways <- opq(bbox = box) %>%
add_osm_feature(key = "highway", value = c("motorway", "trunk", "primary", "secondary")) %>% osmdata_sf()
if(!is.null(highways$osm_lines)){
road <- sum(st_length(highways$osm_lines))
} else{
road <- 0
}
return(road)
}
highways <- opq(bbox = box) %>%
add_osm_feature(key = "highway", value = c("motorway", "trunk", "primary", "secondary")) %>% osmdata_sf()
knitr::opts_chunk$set(echo = TRUE)
packages <- c( 'viridis','rnaturalearthhires',
'sf','INLA','rgeoboundaries','tidyverse')
package.check <- lapply(packages, FUN = function(x){
if(!require(x ,character.only = T)){install.packages(x)}
if(!(x %in% ( .packages()  ) ) ){library(x ,character.only = T)}
})
theme_set(theme_minimal())
options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
source("fnCheckInputsDown.R")
source("fnCreateMesh.R")
source("fnPredictDown.R")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)[,6]
# observed areal data
dearea <- st_read("areal_data/dearea.shp")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)[,6]
# observed areal data
dearea <- st_read("areal_data/dearea_cov.shp")
setwd("~/Documents/Project 1/resources/sptialM/data")
setwd("~/Documents/Project 1/resources/sptialM")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)[,6]
# observed areal data
dearea <- st_read("areal_data/dearea_cov.shp")
depoint <- read.csv("pointdata.csv")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)[,6]
# observed areal data
dearea <- st_read("data/dearea_cov.shp")
# observed point data
depoint <- read.csv("pointdata.csv")
# CRS projection
crsproj <- 4326
library(rgeoboundaries)
boundaryregion <- geoboundaries("United Kingdom")
boundaryregion <- st_transform(boundaryregion , crsproj)[,6]
# observed areal data
dearea <- st_read("data/dearea_cov.shp")
# observed point data
depoint <- read.csv("data/pointdata.csv")
depoint <- depoint[, c(2, 3, 4)]
colnames(depoint) <- c('value', 'y', 'x')
depoint <- depoint %>% st_as_sf(coords = c("x", "y"), dim = "XY") %>%
st_set_crs(crsproj) %>% st_cast("MULTIPOINT")
colnames(dearea) <- c('value', 'geometry')
box <- unname(st_bbox(dearea[1,]))
st_bbox(dearea[1,])
box <- unname(st_bbox(dearea))
st_bbox(dearea[1,])
View(dearea)
dearea[1,c(1,2)]
dearea
dearea <- st_read("data/dearea.shp")
box <- unname(st_bbox(dearea[1, ]))
highways <- opq(bbox = box) %>%
add_osm_feature(key = "highway", value = c("motorway", "trunk", "primary", "secondary")) %>% osmdata_sf()
route <- highways$osm_lines
route <- highways$osm_lines
utm_route = st_transform(route, 2158)
buffer_margin = units::set_units(1000, m)
road_prop <- utm_route%>%
st_buffer(buffer_margin) %>%
st_transform(4326)
ggplot(road_prop) +
geom_sf()
box <- unname(st_bbox(dearea[2, ]))
highways <- opq(bbox = box) %>%
add_osm_feature(key = "highway", value = c("motorway", "trunk", "primary", "secondary")) %>% osmdata_sf()
route <- highways$osm_lines
utm_route = st_transform(route, 2158)
buffer_margin = units::set_units(1000, m)
road_prop <- utm_route%>%
st_buffer(buffer_margin) %>%
st_transform(4326)
ggplot(road_prop) +
geom_sf()
box <- unname(st_bbox(dearea[1, ]))
highways <- opq(bbox = box) %>%
add_osm_feature(key = "highway", value = c("motorway", "trunk", "primary", "secondary")) %>% osmdata_sf()
route <- highways$osm_lines
utm_route = st_transform(route, 2158)
buffer_margin = units::set_units(1000, m)
road_prop <- utm_route%>%
st_buffer(buffer_margin) %>%
st_transform(4326)
ggplot(road_prop) +
geom_sf()
p1 = ggplot(road_prop) +
geom_sf()
roads_by_stage <- st_intersection(route,road_prop)
ggplot(road_prop) +
geom_sf()+
geom_sf(data=roads_by_stage, color='red')
ggplot(road_prop) +
geom_sf()+
geom_sf(data=roads_by_stage, color='red')+labs(title = 'Buffered Route and Roads')
ggplot(road_prop) +
geom_sf()+
geom_sf(data=roads_by_stage, color='red')+labs(title = 'Buffered Route and Roads',xlab = 'Latitude',ylab = 'Longitude')
ggplot(road_prop) +
geom_sf()+
geom_sf(data=roads_by_stage, color='red')+labs(title = 'Buffered Route and Roads',xlab = 'Latitude',ylab = 'Longitude') +
theme(text = element_text(size = 15))
